/* eslint-disable */

import {
Const,
BinaryOperand,
Variable,
Operand,
UnaryOperand,
FunctionOperand,
ArrayOperand
} from "./expressions";



const peggyParser: {parse: any, SyntaxError: any, DefaultTracer?: any} = // @generated by Peggy 5.0.6.
//
// https://peggyjs.org/
// @ts-ignore
(function() {
// @ts-ignore
  "use strict";
// @ts-ignore
class peg$SyntaxError extends SyntaxError {
// @ts-ignore
  constructor(message, expected, found, location) {
// @ts-ignore
    super(message);
// @ts-ignore
    this.expected = expected;
// @ts-ignore
    this.found = found;
// @ts-ignore
    this.location = location;
// @ts-ignore
    this.name = "SyntaxError";
  }

// @ts-ignore
  format(sources) {
// @ts-ignore
    let str = "Error: " + this.message;
// @ts-ignore
    if (this.location) {
// @ts-ignore
      let src = null;
// @ts-ignore
      const st = sources.find(s => s.source === this.location.source);
// @ts-ignore
      if (st) {
// @ts-ignore
        src = st.text.split(/\r\n|\n|\r/g);
      }
// @ts-ignore
      const s = this.location.start;
// @ts-ignore
      const offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
// @ts-ignore
        ? this.location.source.offset(s)
// @ts-ignore
        : s;
// @ts-ignore
      const loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
// @ts-ignore
      if (src) {
// @ts-ignore
        const e = this.location.end;
// @ts-ignore
        const filler = "".padEnd(offset_s.line.toString().length, " ");
// @ts-ignore
        const line = src[s.line - 1];
// @ts-ignore
        const last = s.line === e.line ? e.column : line.length + 1;
// @ts-ignore
        const hatLen = (last - s.column) || 1;
// @ts-ignore
        str += "\n --> " + loc + "\n"
// @ts-ignore
            + filler + " |\n"
// @ts-ignore
            + offset_s.line + " | " + line + "\n"
// @ts-ignore
            + filler + " | " + "".padEnd(s.column - 1, " ")
// @ts-ignore
            + "".padEnd(hatLen, "^");
// @ts-ignore
      } else {
// @ts-ignore
        str += "\n at " + loc;
      }
    }
// @ts-ignore
    return str;
  }

// @ts-ignore
  static buildMessage(expected, found) {
// @ts-ignore
    function hex(ch) {
// @ts-ignore
      return ch.codePointAt(0).toString(16).toUpperCase();
    }

// @ts-ignore
    const nonPrintable = Object.prototype.hasOwnProperty.call(RegExp.prototype, "unicode")
// @ts-ignore
      ? new RegExp("[\\p{C}\\p{Mn}\\p{Mc}]", "gu")
// @ts-ignore
      : null;
// @ts-ignore
    function unicodeEscape(s) {
// @ts-ignore
      if (nonPrintable) {
// @ts-ignore
        return s.replace(nonPrintable,  ch => "\\u{" + hex(ch) + "}");
      }
// @ts-ignore
      return s;
    }

// @ts-ignore
    function literalEscape(s) {
// @ts-ignore
      return unicodeEscape(s
// @ts-ignore
        .replace(/\\/g, "\\\\")
// @ts-ignore
        .replace(/"/g,  "\\\"")
// @ts-ignore
        .replace(/\0/g, "\\0")
// @ts-ignore
        .replace(/\t/g, "\\t")
// @ts-ignore
        .replace(/\n/g, "\\n")
// @ts-ignore
        .replace(/\r/g, "\\r")
// @ts-ignore
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
// @ts-ignore
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

// @ts-ignore
    function classEscape(s) {
// @ts-ignore
      return unicodeEscape(s
// @ts-ignore
        .replace(/\\/g, "\\\\")
// @ts-ignore
        .replace(/\]/g, "\\]")
// @ts-ignore
        .replace(/\^/g, "\\^")
// @ts-ignore
        .replace(/-/g,  "\\-")
// @ts-ignore
        .replace(/\0/g, "\\0")
// @ts-ignore
        .replace(/\t/g, "\\t")
// @ts-ignore
        .replace(/\n/g, "\\n")
// @ts-ignore
        .replace(/\r/g, "\\r")
// @ts-ignore
        .replace(/[\x00-\x0F]/g,          ch => "\\x0" + hex(ch))
// @ts-ignore
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => "\\x"  + hex(ch)));
    }

// @ts-ignore
    const DESCRIBE_EXPECTATION_FNS = {
// @ts-ignore
      literal(expectation) {
// @ts-ignore
        return "\"" + literalEscape(expectation.text) + "\"";
      },

// @ts-ignore
      class(expectation) {
// @ts-ignore
        const escapedParts = expectation.parts.map(
// @ts-ignore
          part => (Array.isArray(part)
// @ts-ignore
            ? classEscape(part[0]) + "-" + classEscape(part[1])
// @ts-ignore
            : classEscape(part))
        );

// @ts-ignore
        return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]" + (expectation.unicode ? "u" : "");
      },

// @ts-ignore
      any() {
// @ts-ignore
        return "any character";
      },

// @ts-ignore
      end() {
// @ts-ignore
        return "end of input";
      },

// @ts-ignore
      other(expectation) {
// @ts-ignore
        return expectation.description;
      },
    };

// @ts-ignore
    function describeExpectation(expectation) {
// @ts-ignore
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

// @ts-ignore
    function describeExpected(expected) {
// @ts-ignore
      const descriptions = expected.map(describeExpectation);
// @ts-ignore
      descriptions.sort();

// @ts-ignore
      if (descriptions.length > 0) {
// @ts-ignore
        let j = 1;
// @ts-ignore
        for (let i = 1; i < descriptions.length; i++) {
// @ts-ignore
          if (descriptions[i - 1] !== descriptions[i]) {
// @ts-ignore
            descriptions[j] = descriptions[i];
// @ts-ignore
            j++;
          }
        }
// @ts-ignore
        descriptions.length = j;
      }

// @ts-ignore
      switch (descriptions.length) {
// @ts-ignore
        case 1:
// @ts-ignore
          return descriptions[0];

// @ts-ignore
        case 2:
// @ts-ignore
          return descriptions[0] + " or " + descriptions[1];

// @ts-ignore
        default:
// @ts-ignore
          return descriptions.slice(0, -1).join(", ")
// @ts-ignore
            + ", or "
// @ts-ignore
            + descriptions[descriptions.length - 1];
      }
    }

// @ts-ignore
    function describeFound(found) {
// @ts-ignore
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

// @ts-ignore
    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  }
}

// @ts-ignore
function peg$parse(input, options) {
// @ts-ignore
  options = options !== undefined ? options : {};

// @ts-ignore
  const peg$FAILED = {};
// @ts-ignore
  const peg$source = options.grammarSource;

// @ts-ignore
  const peg$startRuleFunctions = {
    Expression: peg$parseExpression,
  };
// @ts-ignore
  let peg$startRuleFunction = peg$parseExpression;

// @ts-ignore
  const peg$c0 = "||";
  const peg$c1 = "or";
  const peg$c2 = "&&";
  const peg$c3 = "and";
  const peg$c4 = "<=";
  const peg$c5 = "lessorequal";
  const peg$c6 = ">=";
  const peg$c7 = "greaterorequal";
  const peg$c8 = "==";
  const peg$c9 = "equal";
  const peg$c10 = "=";
  const peg$c11 = "!=";
  const peg$c12 = "notequal";
  const peg$c13 = "<";
  const peg$c14 = "less";
  const peg$c15 = ">";
  const peg$c16 = "greater";
  const peg$c17 = "+";
  const peg$c18 = "-";
  const peg$c19 = "*";
  const peg$c20 = "/";
  const peg$c21 = "%";
  const peg$c22 = "^";
  const peg$c23 = "power";
  const peg$c24 = "*=";
  const peg$c25 = "contains";
  const peg$c26 = "contain";
  const peg$c27 = "notcontains";
  const peg$c28 = "notcontain";
  const peg$c29 = "anyof";
  const peg$c30 = "allof";
  const peg$c31 = "(";
  const peg$c32 = ")";
  const peg$c33 = "!";
  const peg$c34 = "negate";
  const peg$c35 = "empty";
  const peg$c36 = "notempty";
  const peg$c37 = "undefined";
  const peg$c38 = "null";
  const peg$c39 = "{";
  const peg$c40 = "}";
  const peg$c41 = "''";
  const peg$c42 = "\"\"";
  const peg$c43 = "'";
  const peg$c44 = "\"";
  const peg$c45 = "[";
  const peg$c46 = "]";
  const peg$c47 = ",";
  const peg$c48 = "true";
  const peg$c49 = "false";
  const peg$c50 = "0x";
  const peg$c51 = ".";
  const peg$c52 = "0";
  const peg$c53 = "\\'";
  const peg$c54 = "\\\"";

  const peg$r0 = /^[\-]/;
  const peg$r1 = /^[^"']/;
  const peg$r2 = /^[^{}]/;
  const peg$r3 = /^[0-9]/;
  const peg$r4 = /^[1-9]/;
  const peg$r5 = /^[a-zA-Z_]/;
  const peg$r6 = /^[ \t\n\r]/;

  const peg$e0 = peg$literalExpectation("||", false);
  const peg$e1 = peg$literalExpectation("or", true);
  const peg$e2 = peg$literalExpectation("&&", false);
  const peg$e3 = peg$literalExpectation("and", true);
  const peg$e4 = peg$literalExpectation("<=", false);
  const peg$e5 = peg$literalExpectation("lessorequal", true);
  const peg$e6 = peg$literalExpectation(">=", false);
  const peg$e7 = peg$literalExpectation("greaterorequal", true);
  const peg$e8 = peg$literalExpectation("==", false);
  const peg$e9 = peg$literalExpectation("equal", true);
  const peg$e10 = peg$literalExpectation("=", false);
  const peg$e11 = peg$literalExpectation("!=", false);
  const peg$e12 = peg$literalExpectation("notequal", true);
  const peg$e13 = peg$literalExpectation("<", false);
  const peg$e14 = peg$literalExpectation("less", true);
  const peg$e15 = peg$literalExpectation(">", false);
  const peg$e16 = peg$literalExpectation("greater", true);
  const peg$e17 = peg$literalExpectation("+", false);
  const peg$e18 = peg$literalExpectation("-", false);
  const peg$e19 = peg$literalExpectation("*", false);
  const peg$e20 = peg$literalExpectation("/", false);
  const peg$e21 = peg$literalExpectation("%", false);
  const peg$e22 = peg$literalExpectation("^", false);
  const peg$e23 = peg$literalExpectation("power", true);
  const peg$e24 = peg$literalExpectation("*=", false);
  const peg$e25 = peg$literalExpectation("contains", true);
  const peg$e26 = peg$literalExpectation("contain", true);
  const peg$e27 = peg$literalExpectation("notcontains", true);
  const peg$e28 = peg$literalExpectation("notcontain", true);
  const peg$e29 = peg$literalExpectation("anyof", true);
  const peg$e30 = peg$literalExpectation("allof", true);
  const peg$e31 = peg$literalExpectation("(", false);
  const peg$e32 = peg$literalExpectation(")", false);
  const peg$e33 = peg$literalExpectation("!", false);
  const peg$e34 = peg$literalExpectation("negate", true);
  const peg$e35 = peg$literalExpectation("empty", true);
  const peg$e36 = peg$literalExpectation("notempty", true);
  const peg$e37 = peg$literalExpectation("undefined", false);
  const peg$e38 = peg$literalExpectation("null", false);
  const peg$e39 = peg$literalExpectation("{", false);
  const peg$e40 = peg$literalExpectation("}", false);
  const peg$e41 = peg$literalExpectation("''", false);
  const peg$e42 = peg$literalExpectation("\"\"", false);
  const peg$e43 = peg$literalExpectation("'", false);
  const peg$e44 = peg$literalExpectation("\"", false);
  const peg$e45 = peg$literalExpectation("[", false);
  const peg$e46 = peg$literalExpectation("]", false);
  const peg$e47 = peg$literalExpectation(",", false);
  const peg$e48 = peg$literalExpectation("true", true);
  const peg$e49 = peg$literalExpectation("false", true);
  const peg$e50 = peg$literalExpectation("0x", false);
  const peg$e51 = peg$classExpectation(["-"], false, false, false);
  const peg$e52 = peg$literalExpectation(".", false);
  const peg$e53 = peg$literalExpectation("0", false);
  const peg$e54 = peg$literalExpectation("\\'", false);
  const peg$e55 = peg$literalExpectation("\\\"", false);
  const peg$e56 = peg$classExpectation(["\"", "'"], true, false, false);
  const peg$e57 = peg$classExpectation(["{", "}"], true, false, false);
  const peg$e58 = peg$classExpectation([["0", "9"]], false, false, false);
  const peg$e59 = peg$classExpectation([["1", "9"]], false, false, false);
  const peg$e60 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false, false);
  const peg$e61 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false, false);
// @ts-ignore

  function peg$f0(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail, true);
  }// @ts-ignore

  function peg$f1() {// @ts-ignore
    return "or";  }// @ts-ignore

  function peg$f2(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail, true);
  }// @ts-ignore

  function peg$f3() {// @ts-ignore
    return "and";  }// @ts-ignore

  function peg$f4(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail);
  }// @ts-ignore

  function peg$f5() {// @ts-ignore
    return "lessorequal";  }// @ts-ignore

  function peg$f6() {// @ts-ignore
    return "greaterorequal";  }// @ts-ignore

  function peg$f7() {// @ts-ignore
    return "equal";  }// @ts-ignore

  function peg$f8() {// @ts-ignore
    return "equal";  }// @ts-ignore

  function peg$f9() {// @ts-ignore
    return "notequal";  }// @ts-ignore

  function peg$f10() {// @ts-ignore
    return "less";  }// @ts-ignore

  function peg$f11() {// @ts-ignore
    return "greater";  }// @ts-ignore

  function peg$f12(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail, true);
  }// @ts-ignore

  function peg$f13() {// @ts-ignore
    return "plus";  }// @ts-ignore

  function peg$f14() {// @ts-ignore
    return "minus";  }// @ts-ignore

  function peg$f15(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail, true);
  }// @ts-ignore

  function peg$f16() {// @ts-ignore
    return "mul";  }// @ts-ignore

  function peg$f17() {// @ts-ignore
    return "div";  }// @ts-ignore

  function peg$f18() {// @ts-ignore
    return "mod";  }// @ts-ignore

  function peg$f19(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail, true);
  }// @ts-ignore

  function peg$f20() {// @ts-ignore
    return "power";  }// @ts-ignore

  function peg$f21(head, tail) {
// @ts-ignore
    return buildBinaryOperand(head, tail);
  }// @ts-ignore

  function peg$f22() {// @ts-ignore
    return "contains";  }// @ts-ignore

  function peg$f23() {// @ts-ignore
    return "notcontains";  }// @ts-ignore

  function peg$f24() {// @ts-ignore
return "anyof";  }// @ts-ignore

  function peg$f25() {// @ts-ignore
return "allof";  }// @ts-ignore

  function peg$f26(expr) {// @ts-ignore
    return expr;  }// @ts-ignore

  function peg$f27(name, params) {// @ts-ignore
    return new FunctionOperand(name, params);  }// @ts-ignore

  function peg$f28(expr) {// @ts-ignore
    return new UnaryOperand(expr, "negate");  }// @ts-ignore

  function peg$f29(expr, op) {// @ts-ignore
    return new UnaryOperand(expr, op);  }// @ts-ignore

  function peg$f30() {// @ts-ignore
    return "empty";  }// @ts-ignore

  function peg$f31() {// @ts-ignore
    return "notempty";  }// @ts-ignore

  function peg$f32() {// @ts-ignore
    return null;  }// @ts-ignore

  function peg$f33(value) {// @ts-ignore
    return new Const(value);  }// @ts-ignore

  function peg$f34(value) {// @ts-ignore
    return new Variable(value);  }// @ts-ignore

  function peg$f35(value) {// @ts-ignore
    return value;  }// @ts-ignore

  function peg$f36(value) {// @ts-ignore
    return value;  }// @ts-ignore

  function peg$f37(value) {// @ts-ignore
    return value;  }// @ts-ignore

  function peg$f38() {// @ts-ignore
return "";  }// @ts-ignore

  function peg$f39() {// @ts-ignore
return "";  }// @ts-ignore

  function peg$f40(value) {// @ts-ignore
    return "'" + value + "'";  }// @ts-ignore

  function peg$f41(value) {// @ts-ignore
    return "'" + value + "'";  }// @ts-ignore

  function peg$f42(sequence) {// @ts-ignore
    return sequence;  }// @ts-ignore

  function peg$f43(expr, tail) {
// @ts-ignore
    if (expr == null)
// @ts-ignore
      return new ArrayOperand([]);

// @ts-ignore
    var array = [expr];
// @ts-ignore
    if (Array.isArray(tail)) {
// @ts-ignore
      var flatten = flattenArray(tail);
// @ts-ignore
      for (var i = 3; i < flatten.length; i += 4) {
// @ts-ignore
        array.push(flatten[i]);
      }
    }

// @ts-ignore
    return new ArrayOperand(array);
  }// @ts-ignore

  function peg$f44() {// @ts-ignore
    return true;  }// @ts-ignore

  function peg$f45() {// @ts-ignore
    return false;  }// @ts-ignore

  function peg$f46() {// @ts-ignore
    return parseInt(text(), 16);  }// @ts-ignore

  function peg$f47(sign, num) {// @ts-ignore
    return sign == null ? num : -num;  }// @ts-ignore

  function peg$f48() {// @ts-ignore
    return parseFloat(text());  }// @ts-ignore

  function peg$f49() {// @ts-ignore
    return parseInt(text(), 10);  }// @ts-ignore

  function peg$f50() {// @ts-ignore
    return 0;  }// @ts-ignore

  function peg$f51(chars) {// @ts-ignore
    return chars.join("");  }// @ts-ignore

  function peg$f52(chars) {// @ts-ignore
    return chars.join("");  }// @ts-ignore

  function peg$f53() {// @ts-ignore
    return "'";  }// @ts-ignore

  function peg$f54() {// @ts-ignore
    return "\"";  }// @ts-ignore

  function peg$f55() {// @ts-ignore
    return text();  }// @ts-ignore

  function peg$f56() {// @ts-ignore
    return text();  }// @ts-ignore

  function peg$f57() {// @ts-ignore
    return text();  }
// @ts-ignore
  let peg$currPos = options.peg$currPos | 0;
// @ts-ignore
  let peg$savedPos = peg$currPos;
// @ts-ignore
  const peg$posDetailsCache = [{ line: 1, column: 1 }];
// @ts-ignore
  let peg$maxFailPos = peg$currPos;
// @ts-ignore
  let peg$maxFailExpected = options.peg$maxFailExpected || [];
// @ts-ignore
  let peg$silentFails = options.peg$silentFails | 0;

// @ts-ignore
  let peg$resultsCache = {};

// @ts-ignore
  let peg$result;

// @ts-ignore
  if (options.startRule) {
// @ts-ignore
    if (!(options.startRule in peg$startRuleFunctions)) {
// @ts-ignore
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

// @ts-ignore
    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

// @ts-ignore
  function text() {
// @ts-ignore
    return input.substring(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function offset() {
// @ts-ignore
    return peg$savedPos;
  }

// @ts-ignore
  function range() {
// @ts-ignore
    return {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: peg$savedPos,
// @ts-ignore
      end: peg$currPos,
    };
  }

// @ts-ignore
  function location() {
// @ts-ignore
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

// @ts-ignore
  function expected(description, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      [peg$otherExpectation(description)],
// @ts-ignore
      input.substring(peg$savedPos, peg$currPos),
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function error(message, location) {
// @ts-ignore
    location = location !== undefined
// @ts-ignore
      ? location
// @ts-ignore
      : peg$computeLocation(peg$savedPos, peg$currPos);

// @ts-ignore
    throw peg$buildSimpleError(message, location);
  }

// @ts-ignore
  function peg$getUnicode(pos = peg$currPos) {
// @ts-ignore
    const cp = input.codePointAt(pos);
// @ts-ignore
    if (cp === undefined) {
// @ts-ignore
      return "";
    }
// @ts-ignore
    return String.fromCodePoint(cp);
  }

// @ts-ignore
  function peg$literalExpectation(text, ignoreCase) {
// @ts-ignore
    return { type: "literal", text, ignoreCase };
  }

// @ts-ignore
  function peg$classExpectation(parts, inverted, ignoreCase, unicode) {
// @ts-ignore
    return { type: "class", parts, inverted, ignoreCase, unicode };
  }

// @ts-ignore
  function peg$anyExpectation() {
// @ts-ignore
    return { type: "any" };
  }

// @ts-ignore
  function peg$endExpectation() {
// @ts-ignore
    return { type: "end" };
  }

// @ts-ignore
  function peg$otherExpectation(description) {
// @ts-ignore
    return { type: "other", description };
  }

// @ts-ignore
  function peg$computePosDetails(pos) {
// @ts-ignore
    let details = peg$posDetailsCache[pos];
// @ts-ignore
    let p;

// @ts-ignore
    if (details) {
// @ts-ignore
      return details;
// @ts-ignore
    } else {
// @ts-ignore
      if (pos >= peg$posDetailsCache.length) {
// @ts-ignore
        p = peg$posDetailsCache.length - 1;
// @ts-ignore
      } else {
// @ts-ignore
        p = pos;
// @ts-ignore
        while (!peg$posDetailsCache[--p]) {}
      }

// @ts-ignore
      details = peg$posDetailsCache[p];
// @ts-ignore
      details = {
// @ts-ignore
        line: details.line,
// @ts-ignore
        column: details.column,
      };

// @ts-ignore
      while (p < pos) {
// @ts-ignore
        if (input.charCodeAt(p) === 10) {
// @ts-ignore
          details.line++;
// @ts-ignore
          details.column = 1;
// @ts-ignore
        } else {
// @ts-ignore
          details.column++;
        }

// @ts-ignore
        p++;
      }

// @ts-ignore
      peg$posDetailsCache[pos] = details;

// @ts-ignore
      return details;
    }
  }

// @ts-ignore
  function peg$computeLocation(startPos, endPos, offset) {
// @ts-ignore
    const startPosDetails = peg$computePosDetails(startPos);
// @ts-ignore
    const endPosDetails = peg$computePosDetails(endPos);

// @ts-ignore
    const res = {
// @ts-ignore
      source: peg$source,
// @ts-ignore
      start: {
// @ts-ignore
        offset: startPos,
// @ts-ignore
        line: startPosDetails.line,
// @ts-ignore
        column: startPosDetails.column,
      },
// @ts-ignore
      end: {
// @ts-ignore
        offset: endPos,
// @ts-ignore
        line: endPosDetails.line,
// @ts-ignore
        column: endPosDetails.column,
      },
    };
// @ts-ignore
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
// @ts-ignore
      res.start = peg$source.offset(res.start);
// @ts-ignore
      res.end = peg$source.offset(res.end);
    }
// @ts-ignore
    return res;
  }

// @ts-ignore
  function peg$fail(expected) {
// @ts-ignore
    if (peg$currPos < peg$maxFailPos) { return; }

// @ts-ignore
    if (peg$currPos > peg$maxFailPos) {
// @ts-ignore
      peg$maxFailPos = peg$currPos;
// @ts-ignore
      peg$maxFailExpected = [];
    }

// @ts-ignore
    peg$maxFailExpected.push(expected);
  }

// @ts-ignore
  function peg$buildSimpleError(message, location) {
// @ts-ignore
    return new peg$SyntaxError(message, null, null, location);
  }

// @ts-ignore
  function peg$buildStructuredError(expected, found, location) {
// @ts-ignore
    return new peg$SyntaxError(
// @ts-ignore
      peg$SyntaxError.buildMessage(expected, found),
// @ts-ignore
      expected,
// @ts-ignore
      found,
// @ts-ignore
      location
    );
  }

// @ts-ignore
  function // @ts-ignore
peg$parseExpression() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7, s8;

// @ts-ignore
    const key = peg$currPos * 34 + 0;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    s2 = peg$parseLogicOr();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      s3 = [];
// @ts-ignore
      s4 = peg$currPos;
// @ts-ignore
      s5 = peg$parse_();
// @ts-ignore
      s6 = peg$parseOrSign();
// @ts-ignore
      if (s6 !== peg$FAILED) {
// @ts-ignore
        s7 = peg$parse_();
// @ts-ignore
        s8 = peg$parseLogicOr();
// @ts-ignore
        if (s8 !== peg$FAILED) {
// @ts-ignore
          s5 = [s5, s6, s7, s8];
// @ts-ignore
          s4 = s5;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s4;
// @ts-ignore
        s4 = peg$FAILED;
      }
// @ts-ignore
      while (s4 !== peg$FAILED) {
// @ts-ignore
        s3.push(s4);
// @ts-ignore
        s4 = peg$currPos;
// @ts-ignore
        s5 = peg$parse_();
// @ts-ignore
        s6 = peg$parseOrSign();
// @ts-ignore
        if (s6 !== peg$FAILED) {
// @ts-ignore
          s7 = peg$parse_();
// @ts-ignore
          s8 = peg$parseLogicOr();
// @ts-ignore
          if (s8 !== peg$FAILED) {
// @ts-ignore
            s5 = [s5, s6, s7, s8];
// @ts-ignore
            s4 = s5;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s4;
// @ts-ignore
            s4 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s4;
// @ts-ignore
          s4 = peg$FAILED;
        }
      }
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f0(s2, s3);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseOrSign() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 1;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c0) {
// @ts-ignore
      s1 = peg$c0;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 2);
// @ts-ignore
      if (s1.toLowerCase() === peg$c1) {
// @ts-ignore
        peg$currPos += (2);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e1); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f1();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicOr() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 2;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicAnd();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseAndSign();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseLogicAnd();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseAndSign();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseLogicAnd();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f2(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAndSign() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 3;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c2) {
// @ts-ignore
      s1 = peg$c2;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 3);
// @ts-ignore
      if (s1.toLowerCase() === peg$c3) {
// @ts-ignore
        peg$currPos += (3);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f3();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicAnd() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 4;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseCompOps();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseComparableOperators();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseCompOps();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseComparableOperators();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseCompOps();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f4(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseComparableOperators() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 5;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c4) {
// @ts-ignore
      s1 = peg$c4;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 11);
// @ts-ignore
      if (s1.toLowerCase() === peg$c5) {
// @ts-ignore
        peg$currPos += (11);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f5();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c6) {
// @ts-ignore
        s1 = peg$c6;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e6); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 14);
// @ts-ignore
        if (s1.toLowerCase() === peg$c7) {
// @ts-ignore
          peg$currPos += (14);
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f6();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.substr(peg$currPos, 2) === peg$c8) {
// @ts-ignore
          s1 = peg$c8;
// @ts-ignore
          peg$currPos += 2;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
// @ts-ignore
        if (s1 === peg$FAILED) {
// @ts-ignore
          s1 = input.substr(peg$currPos, 5);
// @ts-ignore
          if (s1.toLowerCase() === peg$c9) {
// @ts-ignore
            peg$currPos += (5);
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f7();
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.charCodeAt(peg$currPos) === 61) {
// @ts-ignore
            s1 = peg$c10;
// @ts-ignore
            peg$currPos++;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
// @ts-ignore
          if (s1 === peg$FAILED) {
// @ts-ignore
            s1 = input.substr(peg$currPos, 5);
// @ts-ignore
            if (s1.toLowerCase() === peg$c9) {
// @ts-ignore
              peg$currPos += (5);
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f8();
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c11) {
// @ts-ignore
              s1 = peg$c11;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
// @ts-ignore
            if (s1 === peg$FAILED) {
// @ts-ignore
              s1 = input.substr(peg$currPos, 8);
// @ts-ignore
              if (s1.toLowerCase() === peg$c12) {
// @ts-ignore
                peg$currPos += (8);
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f9();
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 60) {
// @ts-ignore
                s1 = peg$c13;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
// @ts-ignore
              if (s1 === peg$FAILED) {
// @ts-ignore
                s1 = input.substr(peg$currPos, 4);
// @ts-ignore
                if (s1.toLowerCase() === peg$c14) {
// @ts-ignore
                  peg$currPos += (4);
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                peg$savedPos = s0;
// @ts-ignore
                s1 = peg$f10();
              }
// @ts-ignore
              s0 = s1;
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 62) {
// @ts-ignore
                  s1 = peg$c15;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e15); }
                }
// @ts-ignore
                if (s1 === peg$FAILED) {
// @ts-ignore
                  s1 = input.substr(peg$currPos, 7);
// @ts-ignore
                  if (s1.toLowerCase() === peg$c16) {
// @ts-ignore
                    peg$currPos += (7);
// @ts-ignore
                  } else {
// @ts-ignore
                    s1 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e16); }
                  }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  peg$savedPos = s0;
// @ts-ignore
                  s1 = peg$f11();
                }
// @ts-ignore
                s0 = s1;
              }
            }
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseCompOps() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 6;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parsePlusMinusOps();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parsePlusMinusSigns();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parsePlusMinusOps();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsePlusMinusSigns();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parsePlusMinusOps();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f12(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePlusMinusSigns() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 7;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 43) {
// @ts-ignore
      s1 = peg$c17;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f13();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 45) {
// @ts-ignore
        s1 = peg$c18;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f14();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePlusMinusOps() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 8;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseMulDivOps();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseMulDivSigns();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseMulDivOps();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseMulDivSigns();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseMulDivOps();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f15(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMulDivSigns() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 9;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 42) {
// @ts-ignore
      s1 = peg$c19;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f16();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 47) {
// @ts-ignore
        s1 = peg$c20;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f17();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 37) {
// @ts-ignore
          s1 = peg$c21;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f18();
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseMulDivOps() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 10;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseBinaryFuncOp();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parsePowerSigns();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseBinaryFuncOp();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parsePowerSigns();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseBinaryFuncOp();
// @ts-ignore
          if (s7 !== peg$FAILED) {
// @ts-ignore
            s4 = [s4, s5, s6, s7];
// @ts-ignore
            s3 = s4;
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s3;
// @ts-ignore
            s3 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f19(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parsePowerSigns() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 11;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 94) {
// @ts-ignore
      s1 = peg$c22;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      if (s1.toLowerCase() === peg$c23) {
// @ts-ignore
        peg$currPos += (5);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f20();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBinaryFuncOp() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 12;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseFactor();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      s5 = peg$parseBinFunctions();
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseFactor();
// @ts-ignore
        if (s7 === peg$FAILED) {
// @ts-ignore
          s7 = null;
        }
// @ts-ignore
        s4 = [s4, s5, s6, s7];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        s5 = peg$parseBinFunctions();
// @ts-ignore
        if (s5 !== peg$FAILED) {
// @ts-ignore
          s6 = peg$parse_();
// @ts-ignore
          s7 = peg$parseFactor();
// @ts-ignore
          if (s7 === peg$FAILED) {
// @ts-ignore
            s7 = null;
          }
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f21(s1, s2);
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseBinFunctions() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 13;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c24) {
// @ts-ignore
      s1 = peg$c24;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      if (s1.toLowerCase() === peg$c25) {
// @ts-ignore
        peg$currPos += (8);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 7);
// @ts-ignore
        if (s1.toLowerCase() === peg$c26) {
// @ts-ignore
          peg$currPos += (7);
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f22();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = input.substr(peg$currPos, 11);
// @ts-ignore
      if (s1.toLowerCase() === peg$c27) {
// @ts-ignore
        peg$currPos += (11);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = input.substr(peg$currPos, 10);
// @ts-ignore
        if (s1.toLowerCase() === peg$c28) {
// @ts-ignore
          peg$currPos += (10);
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f23();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = input.substr(peg$currPos, 5);
// @ts-ignore
        if (s1.toLowerCase() === peg$c29) {
// @ts-ignore
          peg$currPos += (5);
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e29); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f24();
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          s1 = input.substr(peg$currPos, 5);
// @ts-ignore
          if (s1.toLowerCase() === peg$c30) {
// @ts-ignore
            peg$currPos += (5);
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f25();
          }
// @ts-ignore
          s0 = s1;
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFactor() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5;

// @ts-ignore
    const key = peg$currPos * 34 + 14;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
      s1 = peg$c31;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseExpression();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        s4 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s5 = peg$c32;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s5 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
// @ts-ignore
        if (s5 === peg$FAILED) {
// @ts-ignore
          s5 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f26(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$parseFunctionOp();
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$parseUnaryFunctionOp();
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$parseAtom();
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$parseArrayOp();
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseFunctionOp() {
// @ts-ignore
    let s0, s1, s2, s3, s4;

// @ts-ignore
    const key = peg$currPos * 34 + 15;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLettersAndDigits();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 40) {
// @ts-ignore
        s2 = peg$c31;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e31); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseSequence();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 41) {
// @ts-ignore
          s4 = peg$c32;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s4 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
// @ts-ignore
        if (s4 === peg$FAILED) {
// @ts-ignore
          s4 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f27(s1, s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnaryFunctionOp() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    const key = peg$currPos * 34 + 16;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 33) {
// @ts-ignore
      s1 = peg$c33;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = input.substr(peg$currPos, 6);
// @ts-ignore
      if (s1.toLowerCase() === peg$c34) {
// @ts-ignore
        peg$currPos += (6);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e34); }
      }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parse_();
// @ts-ignore
      s3 = peg$parseFactor();
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f28(s3);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseAtom();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parse_();
// @ts-ignore
        s3 = peg$parseUnFunctions();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f29(s1, s3);
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseUnFunctions() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 17;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.substr(peg$currPos, 5);
// @ts-ignore
    if (s1.toLowerCase() === peg$c35) {
// @ts-ignore
      peg$currPos += (5);
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f30();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = input.substr(peg$currPos, 8);
// @ts-ignore
      if (s1.toLowerCase() === peg$c36) {
// @ts-ignore
        peg$currPos += (8);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e36); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f31();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAtom() {
// @ts-ignore
    let s0, s1, s2, s3, s4;

// @ts-ignore
    const key = peg$currPos * 34 + 18;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parse_();
// @ts-ignore
    if (input.substr(peg$currPos, 9) === peg$c37) {
// @ts-ignore
      s2 = peg$c37;
// @ts-ignore
      peg$currPos += 9;
// @ts-ignore
    } else {
// @ts-ignore
      s2 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
// @ts-ignore
    if (s2 === peg$FAILED) {
// @ts-ignore
      if (input.substr(peg$currPos, 4) === peg$c38) {
// @ts-ignore
        s2 = peg$c38;
// @ts-ignore
        peg$currPos += 4;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
    }
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f32();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parse_();
// @ts-ignore
      s2 = peg$parseConstValue();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f33(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parse_();
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 123) {
// @ts-ignore
          s2 = peg$c39;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s2 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
// @ts-ignore
        if (s2 !== peg$FAILED) {
// @ts-ignore
          s3 = peg$parseValueInput();
// @ts-ignore
          if (s3 !== peg$FAILED) {
// @ts-ignore
            if (input.charCodeAt(peg$currPos) === 125) {
// @ts-ignore
              s4 = peg$c40;
// @ts-ignore
              peg$currPos++;
// @ts-ignore
            } else {
// @ts-ignore
              s4 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e40); }
            }
// @ts-ignore
            if (s4 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s0 = peg$f34(s3);
// @ts-ignore
            } else {
// @ts-ignore
              peg$currPos = s0;
// @ts-ignore
              s0 = peg$FAILED;
            }
// @ts-ignore
          } else {
// @ts-ignore
            peg$currPos = s0;
// @ts-ignore
            s0 = peg$FAILED;
          }
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseConstValue() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    const key = peg$currPos * 34 + 19;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLogicValue();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f35(s1);
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseArithmeticValue();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f36(s1);
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = peg$parseLettersAndDigits();
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f37(s1);
        }
// @ts-ignore
        s0 = s1;
// @ts-ignore
        if (s0 === peg$FAILED) {
// @ts-ignore
          s0 = peg$currPos;
// @ts-ignore
          if (input.substr(peg$currPos, 2) === peg$c41) {
// @ts-ignore
            s1 = peg$c41;
// @ts-ignore
            peg$currPos += 2;
// @ts-ignore
          } else {
// @ts-ignore
            s1 = peg$FAILED;
// @ts-ignore
            if (peg$silentFails === 0) { peg$fail(peg$e41); }
          }
// @ts-ignore
          if (s1 !== peg$FAILED) {
// @ts-ignore
            peg$savedPos = s0;
// @ts-ignore
            s1 = peg$f38();
          }
// @ts-ignore
          s0 = s1;
// @ts-ignore
          if (s0 === peg$FAILED) {
// @ts-ignore
            s0 = peg$currPos;
// @ts-ignore
            if (input.substr(peg$currPos, 2) === peg$c42) {
// @ts-ignore
              s1 = peg$c42;
// @ts-ignore
              peg$currPos += 2;
// @ts-ignore
            } else {
// @ts-ignore
              s1 = peg$FAILED;
// @ts-ignore
              if (peg$silentFails === 0) { peg$fail(peg$e42); }
            }
// @ts-ignore
            if (s1 !== peg$FAILED) {
// @ts-ignore
              peg$savedPos = s0;
// @ts-ignore
              s1 = peg$f39();
            }
// @ts-ignore
            s0 = s1;
// @ts-ignore
            if (s0 === peg$FAILED) {
// @ts-ignore
              s0 = peg$currPos;
// @ts-ignore
              if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
                s1 = peg$c43;
// @ts-ignore
                peg$currPos++;
// @ts-ignore
              } else {
// @ts-ignore
                s1 = peg$FAILED;
// @ts-ignore
                if (peg$silentFails === 0) { peg$fail(peg$e43); }
              }
// @ts-ignore
              if (s1 !== peg$FAILED) {
// @ts-ignore
                s2 = peg$parseAnyInput();
// @ts-ignore
                if (s2 !== peg$FAILED) {
// @ts-ignore
                  if (input.charCodeAt(peg$currPos) === 39) {
// @ts-ignore
                    s3 = peg$c43;
// @ts-ignore
                    peg$currPos++;
// @ts-ignore
                  } else {
// @ts-ignore
                    s3 = peg$FAILED;
// @ts-ignore
                    if (peg$silentFails === 0) { peg$fail(peg$e43); }
                  }
// @ts-ignore
                  if (s3 !== peg$FAILED) {
// @ts-ignore
                    peg$savedPos = s0;
// @ts-ignore
                    s0 = peg$f40(s2);
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
// @ts-ignore
              } else {
// @ts-ignore
                peg$currPos = s0;
// @ts-ignore
                s0 = peg$FAILED;
              }
// @ts-ignore
              if (s0 === peg$FAILED) {
// @ts-ignore
                s0 = peg$currPos;
// @ts-ignore
                if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
                  s1 = peg$c44;
// @ts-ignore
                  peg$currPos++;
// @ts-ignore
                } else {
// @ts-ignore
                  s1 = peg$FAILED;
// @ts-ignore
                  if (peg$silentFails === 0) { peg$fail(peg$e44); }
                }
// @ts-ignore
                if (s1 !== peg$FAILED) {
// @ts-ignore
                  s2 = peg$parseAnyInput();
// @ts-ignore
                  if (s2 !== peg$FAILED) {
// @ts-ignore
                    if (input.charCodeAt(peg$currPos) === 34) {
// @ts-ignore
                      s3 = peg$c44;
// @ts-ignore
                      peg$currPos++;
// @ts-ignore
                    } else {
// @ts-ignore
                      s3 = peg$FAILED;
// @ts-ignore
                      if (peg$silentFails === 0) { peg$fail(peg$e44); }
                    }
// @ts-ignore
                    if (s3 !== peg$FAILED) {
// @ts-ignore
                      peg$savedPos = s0;
// @ts-ignore
                      s0 = peg$f41(s2);
// @ts-ignore
                    } else {
// @ts-ignore
                      peg$currPos = s0;
// @ts-ignore
                      s0 = peg$FAILED;
                    }
// @ts-ignore
                  } else {
// @ts-ignore
                    peg$currPos = s0;
// @ts-ignore
                    s0 = peg$FAILED;
                  }
// @ts-ignore
                } else {
// @ts-ignore
                  peg$currPos = s0;
// @ts-ignore
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArrayOp() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    const key = peg$currPos * 34 + 20;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 91) {
// @ts-ignore
      s1 = peg$c45;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e45); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseSequence();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 93) {
// @ts-ignore
        s3 = peg$c46;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s3 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
// @ts-ignore
      if (s3 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f42(s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseSequence() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6, s7;

// @ts-ignore
    const key = peg$currPos * 34 + 21;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseExpression();
// @ts-ignore
    if (s1 === peg$FAILED) {
// @ts-ignore
      s1 = null;
    }
// @ts-ignore
    s2 = [];
// @ts-ignore
    s3 = peg$currPos;
// @ts-ignore
    s4 = peg$parse_();
// @ts-ignore
    if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
      s5 = peg$c47;
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s5 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
// @ts-ignore
    if (s5 !== peg$FAILED) {
// @ts-ignore
      s6 = peg$parse_();
// @ts-ignore
      s7 = peg$parseExpression();
// @ts-ignore
      if (s7 !== peg$FAILED) {
// @ts-ignore
        s4 = [s4, s5, s6, s7];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s3;
// @ts-ignore
      s3 = peg$FAILED;
    }
// @ts-ignore
    while (s3 !== peg$FAILED) {
// @ts-ignore
      s2.push(s3);
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parse_();
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 44) {
// @ts-ignore
        s5 = peg$c47;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s5 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
// @ts-ignore
      if (s5 !== peg$FAILED) {
// @ts-ignore
        s6 = peg$parse_();
// @ts-ignore
        s7 = peg$parseExpression();
// @ts-ignore
        if (s7 !== peg$FAILED) {
// @ts-ignore
          s4 = [s4, s5, s6, s7];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
    }
// @ts-ignore
    peg$savedPos = s0;
// @ts-ignore
    s0 = peg$f43(s1, s2);

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLogicValue() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 22;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.substr(peg$currPos, 4);
// @ts-ignore
    if (s1.toLowerCase() === peg$c48) {
// @ts-ignore
      peg$currPos += (4);
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e48); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f44();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = input.substr(peg$currPos, 5);
// @ts-ignore
      if (s1.toLowerCase() === peg$c49) {
// @ts-ignore
        peg$currPos += (5);
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f45();
      }
// @ts-ignore
      s0 = s1;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseArithmeticValue() {
// @ts-ignore
    let s0, s1, s2;

// @ts-ignore
    const key = peg$currPos * 34 + 23;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c50) {
// @ts-ignore
      s1 = peg$c50;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e50); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = peg$parseDigits();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f46();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r0.test(s1)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
// @ts-ignore
      if (s1 === peg$FAILED) {
// @ts-ignore
        s1 = null;
      }
// @ts-ignore
      s2 = peg$parseNumber();
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f47(s1, s2);
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNumber() {
// @ts-ignore
    let s0, s1, s2, s3;

// @ts-ignore
    const key = peg$currPos * 34 + 24;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseDigits();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      if (input.charCodeAt(peg$currPos) === 46) {
// @ts-ignore
        s2 = peg$c51;
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s2 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
// @ts-ignore
      if (s2 !== peg$FAILED) {
// @ts-ignore
        s3 = peg$parseDigits();
// @ts-ignore
        if (s3 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s0 = peg$f48();
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s0;
// @ts-ignore
          s0 = peg$FAILED;
        }
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      s1 = peg$parseNonZeroDigits();
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        s2 = peg$parseDigits();
// @ts-ignore
        if (s2 === peg$FAILED) {
// @ts-ignore
          s2 = null;
        }
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s0 = peg$f49();
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s0;
// @ts-ignore
        s0 = peg$FAILED;
      }
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        if (input.charCodeAt(peg$currPos) === 48) {
// @ts-ignore
          s1 = peg$c52;
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e53); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f50();
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseValueInput() {
// @ts-ignore
    let s0, s1, s2;

// @ts-ignore
    const key = peg$currPos * 34 + 25;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseValueCharacters();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$parseValueCharacters();
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f51(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAnyInput() {
// @ts-ignore
    let s0, s1, s2;

// @ts-ignore
    const key = peg$currPos * 34 + 26;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = [];
// @ts-ignore
    s2 = peg$parseAnyCharacters();
// @ts-ignore
    if (s2 !== peg$FAILED) {
// @ts-ignore
      while (s2 !== peg$FAILED) {
// @ts-ignore
        s1.push(s2);
// @ts-ignore
        s2 = peg$parseAnyCharacters();
      }
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f52(s1);
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseAnyCharacters() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 27;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    if (input.substr(peg$currPos, 2) === peg$c53) {
// @ts-ignore
      s1 = peg$c53;
// @ts-ignore
      peg$currPos += 2;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e54); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f53();
    }
// @ts-ignore
    s0 = s1;
// @ts-ignore
    if (s0 === peg$FAILED) {
// @ts-ignore
      s0 = peg$currPos;
// @ts-ignore
      if (input.substr(peg$currPos, 2) === peg$c54) {
// @ts-ignore
        s1 = peg$c54;
// @ts-ignore
        peg$currPos += 2;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e55); }
      }
// @ts-ignore
      if (s1 !== peg$FAILED) {
// @ts-ignore
        peg$savedPos = s0;
// @ts-ignore
        s1 = peg$f54();
      }
// @ts-ignore
      s0 = s1;
// @ts-ignore
      if (s0 === peg$FAILED) {
// @ts-ignore
        s0 = peg$currPos;
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r1.test(s1)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e56); }
        }
// @ts-ignore
        if (s1 !== peg$FAILED) {
// @ts-ignore
          peg$savedPos = s0;
// @ts-ignore
          s1 = peg$f55();
        }
// @ts-ignore
        s0 = s1;
      }
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseValueCharacters() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 28;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r2.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s1 = peg$f56();
    }
// @ts-ignore
    s0 = s1;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLettersAndDigits() {
// @ts-ignore
    let s0, s1, s2, s3, s4, s5, s6;

// @ts-ignore
    const key = peg$currPos * 34 + 29;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = peg$currPos;
// @ts-ignore
    s1 = peg$parseLetters();
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      s2 = [];
// @ts-ignore
      s3 = peg$currPos;
// @ts-ignore
      s4 = peg$parseDigits();
// @ts-ignore
      if (s4 !== peg$FAILED) {
// @ts-ignore
        s5 = [];
// @ts-ignore
        s6 = peg$parseLetters();
// @ts-ignore
        while (s6 !== peg$FAILED) {
// @ts-ignore
          s5.push(s6);
// @ts-ignore
          s6 = peg$parseLetters();
        }
// @ts-ignore
        s4 = [s4, s5];
// @ts-ignore
        s3 = s4;
// @ts-ignore
      } else {
// @ts-ignore
        peg$currPos = s3;
// @ts-ignore
        s3 = peg$FAILED;
      }
// @ts-ignore
      while (s3 !== peg$FAILED) {
// @ts-ignore
        s2.push(s3);
// @ts-ignore
        s3 = peg$currPos;
// @ts-ignore
        s4 = peg$parseDigits();
// @ts-ignore
        if (s4 !== peg$FAILED) {
// @ts-ignore
          s5 = [];
// @ts-ignore
          s6 = peg$parseLetters();
// @ts-ignore
          while (s6 !== peg$FAILED) {
// @ts-ignore
            s5.push(s6);
// @ts-ignore
            s6 = peg$parseLetters();
          }
// @ts-ignore
          s4 = [s4, s5];
// @ts-ignore
          s3 = s4;
// @ts-ignore
        } else {
// @ts-ignore
          peg$currPos = s3;
// @ts-ignore
          s3 = peg$FAILED;
        }
      }
// @ts-ignore
      peg$savedPos = s0;
// @ts-ignore
      s0 = peg$f57();
// @ts-ignore
    } else {
// @ts-ignore
      peg$currPos = s0;
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseDigits() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 30;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r3.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r3.test(s1)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e58); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseNonZeroDigits() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 31;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r4.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r4.test(s1)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e59); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parseLetters() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 32;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r5.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
// @ts-ignore
    if (s1 !== peg$FAILED) {
// @ts-ignore
      while (s1 !== peg$FAILED) {
// @ts-ignore
        s0.push(s1);
// @ts-ignore
        s1 = input.charAt(peg$currPos);
// @ts-ignore
        if (peg$r5.test(s1)) {
// @ts-ignore
          peg$currPos++;
// @ts-ignore
        } else {
// @ts-ignore
          s1 = peg$FAILED;
// @ts-ignore
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
      }
// @ts-ignore
    } else {
// @ts-ignore
      s0 = peg$FAILED;
    }

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }

// @ts-ignore
  function // @ts-ignore
peg$parse_() {
// @ts-ignore
    let s0, s1;

// @ts-ignore
    const key = peg$currPos * 34 + 33;
// @ts-ignore
    const cached = peg$resultsCache[key];

// @ts-ignore
    if (cached) {
// @ts-ignore
      peg$currPos = cached.nextPos;

// @ts-ignore
      return cached.result;
    }

// @ts-ignore
    peg$silentFails++;
// @ts-ignore
    s0 = [];
// @ts-ignore
    s1 = input.charAt(peg$currPos);
// @ts-ignore
    if (peg$r6.test(s1)) {
// @ts-ignore
      peg$currPos++;
// @ts-ignore
    } else {
// @ts-ignore
      s1 = peg$FAILED;
// @ts-ignore
      if (peg$silentFails === 0) { peg$fail(peg$e61); }
    }
// @ts-ignore
    while (s1 !== peg$FAILED) {
// @ts-ignore
      s0.push(s1);
// @ts-ignore
      s1 = input.charAt(peg$currPos);
// @ts-ignore
      if (peg$r6.test(s1)) {
// @ts-ignore
        peg$currPos++;
// @ts-ignore
      } else {
// @ts-ignore
        s1 = peg$FAILED;
// @ts-ignore
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
    }
// @ts-ignore
    peg$silentFails--;

// @ts-ignore
    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

// @ts-ignore
    return s0;
  }


// @ts-ignore
  function buildBinaryOperand(head: Operand, tail: Array<any>, isArithmeticOp: boolean = false) {
// @ts-ignore
    return tail.reduce(
// @ts-ignore
      function(result, elements) {
// @ts-ignore
        return new BinaryOperand(elements[1], result, elements[3], isArithmeticOp);
      }, 
// @ts-ignore
      head);
  }

// @ts-ignore
  function flattenArray(array: Array<any>): Array<any> {
// @ts-ignore
    return [].concat.apply([], array);
  }

// @ts-ignore
  peg$result = peg$startRuleFunction();

// @ts-ignore
  const peg$success = (peg$result !== peg$FAILED && peg$currPos === input.length);
// @ts-ignore
  function peg$throw() {
// @ts-ignore
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
// @ts-ignore
      peg$fail(peg$endExpectation());
    }

// @ts-ignore
    throw peg$buildStructuredError(
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos < input.length ? peg$getUnicode(peg$maxFailPos) : null,
// @ts-ignore
      peg$maxFailPos < input.length
// @ts-ignore
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
// @ts-ignore
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
// @ts-ignore
  if (options.peg$library) {
// @ts-ignore
    return /** @type {any} */ ({
// @ts-ignore
      peg$result,
// @ts-ignore
      peg$currPos,
// @ts-ignore
      peg$FAILED,
// @ts-ignore
      peg$maxFailExpected,
// @ts-ignore
      peg$maxFailPos,
// @ts-ignore
      peg$success,
// @ts-ignore
      peg$throw: peg$success ? undefined : peg$throw,
    });
  }
// @ts-ignore
  if (peg$success) {
// @ts-ignore
    return peg$result;
// @ts-ignore
  } else {
// @ts-ignore
    peg$throw();
  }
}
// @ts-ignore
  return {
    StartRules: ["Expression"],
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  };
})()

export interface FilePosition {
  offset: number;
  line: number;
  column: number;
}

export interface FileRange {
  start: FilePosition;
  end: FilePosition;
  source: string;
}

export interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
  type: "class";
  parts: ClassParts;
  inverted: boolean;
  ignoreCase: boolean;
}

export interface AnyExpectation {
  type: "any";
}

export interface EndExpectation {
  type: "end";
}

export interface OtherExpectation {
  type: "other";
  description: string;
}

export type Expectation = LiteralExpectation | ClassExpectation | AnyExpectation | EndExpectation | OtherExpectation;

declare class _PeggySyntaxError extends Error {
  public static buildMessage(expected: Expectation[], found: string | null): string;
  public message: string;
  public expected: Expectation[];
  public found: string | null;
  public location: FileRange;
  public name: string;
  constructor(message: string, expected: Expectation[], found: string | null, location: FileRange);
  format(sources: {
    source?: any;
    text: string;
  }[]): string;
}

export interface TraceEvent {
    type: string;
    rule: string;
    result?: any;
    location: FileRange;
  }

declare class _DefaultTracer {
  private indentLevel: number;
  public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
  filename?: string;
  startRule?: "Expression";
  tracer?: any;
  [key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
    input: string,
    options?: Options
  ) => Options extends { startRule: infer StartRule } ?
    StartRule extends "Expression" ? Expression : Expression
    : Expression;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError = peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Expression = any;
export type OrSign = "or";
export type LogicOr = any;
export type AndSign = "and";
export type LogicAnd = any;
export type ComparableOperators =
  | "lessorequal"
  | "greaterorequal"
  | "equal"
  | "notequal"
  | "less"
  | "greater";
export type CompOps = any;
export type PlusMinusSigns = "plus" | "minus";
export type PlusMinusOps = any;
export type MulDivSigns = "mul" | "div" | "mod";
export type MulDivOps = any;
export type PowerSigns = "power";
export type BinaryFuncOp = any;
export type BinFunctions = "contains" | "notcontains" | "anyof" | "allof";
export type Factor = Expression | FunctionOp | UnaryFunctionOp | Atom | ArrayOp;
export type FunctionOp = any;
export type UnaryFunctionOp = any;
export type UnFunctions = "empty" | "notempty";
export type Atom = null | any;
export type ConstValue =
  | LogicValue
  | ArithmeticValue
  | LettersAndDigits
  | ""
  | string;
export type ArrayOp = Sequence;
export type Sequence = any;
export type LogicValue = boolean;
export type ArithmeticValue = number | (number | Number_1);
export type Number_1 = number | 0;
export type ValueInput = string;
export type AnyInput = string;
export type AnyCharacters = "'" | '"' | string;
export type ValueCharacters = string;
export type LettersAndDigits = string;
export type Digits = string[];
export type NonZeroDigits = string[];
export type Letters = string[];
export type _ = string[];
